load("//cc/toolchains/impl:variables.bzl", "cc_builtin_variables", "cc_variable", "types")
load("//cc/toolchains:actions.bzl", "cc_action_type_set")

# Docs: https://bazel.build/docs/cc-toolchain-config-reference#cctoolchainconfiginfo-build-variables
# Source:
#  - Compile: https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/CompileBuildVariables.java#L35-L133
#  - Link: https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/LinkBuildVariables.java#L26-L86
#  - Strip: https://github.com/bazelbuild/bazel/blob/a0e13f6d11540b65e7d14af4bbf274029b4d71f2/src/main/java/com/google/devtools/build/lib/rules/cpp/StripBuildVariables.java#L16-L21
#  - Misc: https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/CcCommon.java#L60-L67

package(default_visibility = ["//visibility:public"])

################################################################################

## Action groups:

# While `c++-link-static-library` differs from the other link actions in that
# it invokes ar/libtool and not the linker, it is still run with `CppLinkAction`
# in Bazel and therefore has access to the usual link action variables.
cc_action_type_set(
    name = "all_link_actions",
    actions = [
        "//cc/toolchains/actions:link_actions",
        "//cc/toolchains/actions:cpp_link_static_library",
    ]
)

################################################################################

## Compile:
# https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/CompileBuildVariables.java#L35-L133

"""Variable for the path to the source file being compiled."""
cc_variable(
    name = "source_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

"""Variable for all flags coming from the `copt` rule attribute, and from the
`--copt`, `--cxxopt`, and `--conlyopt` flags.
"""
cc_variable(
    name = "user_compile_flags",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.list(types.string)),
)

"""Variable for the path to the compilation output file."""
cc_variable(
    name = "output_file",
    actions = [
        "//cc/toolchains/actions:compile_actions",

        # See: https://github.com/bazelbuild/bazel/blob/a0e13f6d11540b65e7d14af4bbf274029b4d71f2/src/main/java/com/google/devtools/build/lib/rules/cpp/StripBuildVariables.java#L18-L19
        "//cc/toolchains/actions:strip",
    ],
    type = types.option(types.file),
)

"""Variable for the dependency file path.

The `.d` dependency file generated by the compiler.
"""
cc_variable(
    name = "dependency_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs!
"""Variable for the serialized diagnostics file path."""
cc_variable(
    name = "serialized_diagnostics_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs!
"""Variable for the module file name."""
cc_variable(
    name = "module_name",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.string),
)

"""Variable for the collection of include paths.

Sequence directories in which the compiler searches for headers included using
`#include<foo.h>` and `#include "foo.h"`.
"""
cc_variable(
    name = "include_paths",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.list(types.directory),
)

"""Variable for the collection of quote include paths.

Sequence of `-iquote` includes — directories in which the compiler searches for
headers included using `#include "foo.h"`.
"""
cc_variable(
    name = "quote_include_paths",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.list(types.directory),
)

"""Variable for the collection of system include paths.

Sequence of `-isystem` includes — directories in which the compiler searches for
headers included using `#include <foo.h>`.
"""
cc_variable(
    name = "system_include_paths",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.list(types.directory),
)

# NOTE: missing from docs!
"""Variable for the collection of external include paths."""
cc_variable(
    name = "external_include_paths",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.list(types.directory)),
)

# NOTE: missing from docs!
"""Variable for the collection of framework include paths."""
cc_variable(
    name = "framework_include_paths",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.list(types.directory),
)

# NOTE: missing from docs!
"""Variable for the module map file name."""
cc_variable(
    name = "module_map_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs!
"""Variable for the dependent module map file name."""
cc_variable(
    name = "dependent_module_map_files",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.list(types.file)),
)

# NOTE: missing from docs!
"""Variable for the collection of module files."""
cc_variable(
    name = "module_files",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.list(types.file)),
)

"""Variable for the collection of macros defined for preprocessor.

Sequence of defines, such as `--DDEBUG`.
"""
cc_variable(
    name = "preprocessor_defines",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.list(types.string),
)

"""Variable for the `gcov` coverage file path."""
cc_variable(
    name = "gcov_gcno_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs!
"""Variable for the minimized LTO indexing bitcode file, used by the LTO
indexing action.

This file was generated by CppCompile actions. For efficiency, it contains
minimal information that is required by the LTO indexing action.
"""
cc_variable(
    name = "lto_indexing_bitcode_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs!
"""Variable for the LTO index file, used by the LTO backend action.

This file was generated by the LTO indexing action.
"""
cc_variable(
    name = "thinlto_index",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.string),
)

# NOTE: missing from docs!
"""Variable for the bitcode file that is input to LTO backend."""
cc_variable(
    name = "thinlto_input_bitcode_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs!
"""Variable for the object file that is output by LTO backend."""
cc_variable(
    name = "thinlto_output_object_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

"""Presence of this variable indicates that fission (per-object debug info) is
activated.

Debug info will be in `.dwo` files instead of `.o` files and the compiler and
linker need to know this.
"""
cc_variable(
    name = "is_using_fission",
    actions = [
        "//cc/toolchains/actions:compile_actions",
        ":all_link_actions",
    ],
    type = types.option(types.void),
)

"""Variable for the per object debug info (`.dwp`) file."""
cc_variable(
    name = "per_object_debug_info_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

"""Variable present when the output is compiled as position independent."""
cc_variable(
    name = "pic",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.void),
)

"""Variable marking that we are generating preprocessed sources.

Preprocessed output. Applies only to compile actions that only preprocess the
source files, typically when using the --save_temps flag. The contents are the
same as for output_file.
"""
cc_variable(
    name = "output_preprocess_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.void),
)

"""Variable marking that we are generating assembly source.

Emitted assembly file. Applies only when the compile action emits assembly text,
typically when using the --save_temps flag. The contents are the same as for
output_file.
"""
cc_variable(
    name = "output_assembly_file",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.void),
)

"""Path to the directory that stores FDO instrumentation profile."""
cc_variable(
    name = "fdo_instrument_path",
    actions = [
        "//cc/toolchains/actions:compile_actions",
        ":all_link_actions",
    ],
    type = types.option(types.directory),
)

"""Path to the FDO profile artifact."""
cc_variable(
    name = "fdo_profile_path",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

"""Path to the directory that stores context sensitive FDO instrumentation
profile.
"""
cc_variable(
    name = "cs_fdo_instrument_path",
    actions = [
        "//cc/toolchains/actions:compile_actions",
        ":all_link_actions",
    ],
    type = types.option(types.directory),
)

"""Path to the cache prefetch profile."""
cc_variable(
    name = "fdo_prefetch_hints_path",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs! # NOTE(rules_cc): was missing
"""Path to the Propeller Optimize compiler profile artifact"""
cc_variable(
    name = "propeller_optimize_cc_path",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs! # NOTE(rules_cc): was mis-spelled, incorrectly only scoped to link
"""Path to the Propeller Optimize linker profile artifact"""
cc_variable(
    name = "propeller_optimize_ld_path",
    actions = [
        "//cc/toolchains/actions:compile_actions",
        ":all_link_actions",
    ],
    type = types.option(types.file),
)

# NOTE: missing from docs! # NOTE(rules_cc): was missing
"""Path to the memprof profile artifact"""
cc_variable(
    name = "memprof_profile_path",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.file),
)

"""Sequence of files the compiler must unconditionally include in the compiled
source.
"""
cc_variable(
    name = "includes",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.list(types.file)),
)

################################################################################

## Link:
# https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/LinkBuildVariables.java#L26-L86

"""Entries in the linker runtime search path (usually set with the `-rpath`)"""
cc_variable(
    name = "runtime_library_search_directories",
    actions = [":all_link_actions"],
    type = types.option(types.list(types.directory)),
)


"""Entries in the linker search path (usually set with the `-L` flag)"""
cc_variable(
    name = "library_search_directories",
    actions = [":all_link_actions"],
    type = types.option(types.list(types.directory)),
)

"""Flags providing files to link as inputs in the linker invocation."""
# See: https://github.com/bazelbuild/bazel/blob/f0ade80ce920be0719b1a43a40258397f68a944d/src/main/java/com/google/devtools/build/lib/rules/cpp/CcToolchainVariables.java#L652-L967
# NOTE(rules_cc): fields were wrong; out of sync with source
# TODO: document fields here
# TODO: update cc toolchain reference docs!
libraries_to_link_struct_type = types.struct(
    # one of:
    #  - "dynamic_library"
    #  - "versioned_dynamic_library"
    #  - "interface_library"
    #  - "static_library"
    #  - "object_file"
    #  - "object_file_group"
    type = types.string,

    # present for all values of `type`
    is_whole_archive = types.bool,

    # present for `type != "object_file_group"`
    name = types.option(types.string),

    # present for `type == "versioned_dynamic_library"`
    path = types.option(types.file),

    # present for `type == "object_file_group"`
    #
    # sequence of "exec path string"s for the object files in an object file
    # group
    object_files = types.option(types.list(types.file)),
)
# NOTE: would be very neat if we could extend the type system to express and
# type check "enums" like this one...

cc_variable(
    name = "libraries_to_link",
    actions = [":all_link_actions"],
    type = types.option(types.list(libraries_to_link_struct_type)),
)
cc_variable(
    name = "libraries_to_link.type",
    actions = [":all_link_actions"],
    type = types.string,
)
cc_variable(
    name = "libraries_to_link.is_whole_archive",
    actions = [":all_link_actions"],
    type = types.bool,
)
cc_variable(
    name = "libraries_to_link.name",
    actions = [":all_link_actions"],
    type = types.option(types.string),
)
cc_variable(
    name = "libraries_to_link.path",
    actions = [":all_link_actions"],
    type = types.option(types.file),
)
cc_variable(
    name = "libraries_to_link.object_files",
    actions = [":all_link_actions"],
    type = types.option(types.list(types.file)),
)

# NOTE: missing from docs!
"""ThinLTO param file produced by thinlto-indexing action consumed by the final
link action.
"""
cc_variable(
    name = "thinlto_param_file",
    actions = [":all_link_actions"],
    type = types.option(types.file),
)

"""Location of def file used on Windows with MSVC"""
cc_variable(
    name = "def_file_path",
    actions = [":all_link_actions"],
    type = types.option(types.file),
)

# NOTE: missing from docs!
"""Location where Thinlto should write thinlto_param_file flags when indexing."""
cc_variable(
    name = "thinlto_indexing_param_file",
    actions = [":all_link_actions"],
    type = types.option(types.string),
)

# NOTE: missing from docs!
# Context here: https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/LinkBuildVariables.java#L184-L191
cc_variable(
    name = "thinlto_prefix_replace",
    actions = [":all_link_actions"],
    type = types.option(types.string),
)

# NOTE: missing from docs!
"""A build variable to let the LTO indexing step know how to map from the
minimized bitcode file to the full bitcode file used by the LTO Backends.
"""
cc_variable(
    name = "thinlto_object_suffix_replace",
    actions = [":all_link_actions"],
    type = types.option(types.string),
)

# NOTE: missing from docs!
"""A build variable for the path to the merged object file, which is an object
file that is created during the LTO indexing step and needs to be passed to the
final link.
"""
cc_variable(
    name = "thinlto_merged_object_file",
    actions = [":all_link_actions"],
    type = types.option(types.file),
)

"""Location of linker param file created by Bazel to overcome command line
length limit.
"""
cc_variable(
    name = "linker_param_file",
    actions = [":all_link_actions"],
    type = types.option(types.file),
)

"""Execpath of the output of the linker."""
cc_variable(
    name = "output_execpath",
    actions = [":all_link_actions"],
    type = types.option(types.directory),
)

"""`"yes"` or `"no"` depending on whether interface library should be
generated.
"""
# https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/LinkBuildVariables.java#L233-L244
cc_variable(
    name = "generate_interface_library",
    actions = [":all_link_actions"],
    # "yes" or "no"
    type = types.option(types.string),
)

"""Path to the interface library builder tool.

Execpath to the tool pointed to by `cc_toolchain`'s `_if_so_builder` attr or
`"ignored".
"""
# https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/LinkBuildVariables.java#L233-L244
cc_variable(
    name = "interface_library_builder_path",
    actions = [":all_link_actions"],
    # Should be a file, but contains the string "ignored" when there's no value.
    type = types.string,
)

"""Input for the interface library `ifso` builder tool.

Input path or `"ignored".
"""
# https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/LinkBuildVariables.java#L233-L244
cc_variable(
    name = "interface_library_input_path",
    actions = [":all_link_actions"],
    # Should be a file, but contains the string "ignored" when there's no value.
    type = types.string,
)

"""Path where to generate interface library using the `ifso` builder tool.

Output path or `"ignored".
"""
# https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/LinkBuildVariables.java#L233-L244
cc_variable(
    name = "interface_library_output_path",
    actions = [":all_link_actions"],
    # Should be a file, but contains the string "ignored" when there's no value.
    type = types.string,
)

"""Linker flags coming from the `--linkopt` flag or `linkopts` attribute."""
cc_variable(
    name = "user_link_flags",
    actions = [":all_link_actions"],
    type = types.option(types.list(types.string)),
)

"""A build variable giving linkstamp paths."""
cc_variable(
    name = "linkstamp_paths",
    actions = [":all_link_actions"],
    type = types.option(types.list(types.directory)),
)

"""Presence of this variable indicates that PIC/PIE code should be generated
(Bazel option `--force_pic` was passed).
"""
cc_variable(
    name = "force_pic",
    actions = [":all_link_actions"],
    # Provided when --force-pic is passed
    type = types.option(types.void),
)

"""Presence of this variable indicates that the debug symbols should be
stripped.
"""
cc_variable(
    name = "strip_debug_symbols",
    actions = [":all_link_actions"],
    type = types.option(types.void),
)

"""Truthy when current action is a `cc_test` linking action, false otherwise."""
cc_variable(
    name = "is_cc_test",
    actions = [":all_link_actions"],
    type = types.option(types.bool),
)

# `is_using_fission` is above (available to `compile` as well)

# `fdo_instrument_path` is above (available to `compile` as well)

# `cs_fdo_instrument_path` is above (available to `compile` as well)

# `propeller_optimize_ld_path` is above (available to `compile` as well)

# NOTE: missing from docs!
"""The name of the runtime solib symlink of the shared library."""
cc_variable(
    name = "runtime_solib_name",
    actions = [":all_link_actions"],
    type = types.option(types.string),
)

################################################################################

## Strip:
# https://github.com/bazelbuild/bazel/blob/a0e13f6d11540b65e7d14af4bbf274029b4d71f2/src/main/java/com/google/devtools/build/lib/rules/cpp/StripBuildVariables.java#L16-L21

# `output_file` is above (available to `compile` as well)

"""Sequence of `stripopts`."""
cc_variable(
    name = "stripopts",
    actions = ["//cc/toolchains/actions:strip"],
    type = types.list(types.string),
)

################################################################################

## Misc:
# https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/CcCommon.java#L60-L67

"""Build variable for the `sysroot` path."""
cc_variable(
    name = "sysroot",
    # actions = # TODO(rules_cc): not provided anywhere?
    type = types.option(types.directory),
)

"""Build variable for the path to the input file being processed.

Artifact to strip.
"""
cc_variable(
    name = "input_file",
    actions = ["//cc/toolchains/actions:strip"],
    type = types.file,
)

# NOTE: missing from docs! # NOTE(rule_cc): was missing
"""Build variable for the minimum_os_version being targeted."""
# MINIMUM_OS_VERSION_VARIABLE_NAME("minimum_os_version"),
# TODO: doesn't seem to actually be provided?

#-------------------------------------------------------------------------------

## Legacy CROSSTOOL:
# Specified in docs but can't find in source... These may be deprecated? (TODO)

"""Sequence of flags from legacy `CROSSTOOL` fields such as `compiler_flag`,
`optional_compiler_flag`, `cxx_flag`, and `optional_cxx_flag`.
"""
cc_variable(
    name = "legacy_compile_flags",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.list(types.string)),
)

"""Sequence of flags from the `unfiltered_cxx_flag` legacy `CROSSTOOL` field or
the `unfiltered_compile_flags` feature. These are not filtered by the `nocopts`
rule attribute.
"""
cc_variable(
    name = "unfiltered_compile_flags",
    actions = ["//cc/toolchains/actions:compile_actions"],
    type = types.option(types.list(types.string)),
)

"""Linker flags coming from the legacy `CROSSTOOL` fields."""
cc_variable(
    name = "legacy_link_flags",
    actions = [":all_link_actions"],
    type = types.option(types.list(types.string)),
)

# TODO(rules_cc): couldn't find any references to this variable.. possible typo?
# cc_variable(
#     name = "include",
#     actions = ["//cc/toolchains/actions:compile_actions"],
#     type = types.list(types.file),
# )

################################################################################

# obj-c?
# https://github.com/bazelbuild/bazel/blob/426f2254669f62b7d332094a0af6d4dc6200ad51/src/main/java/com/google/devtools/build/lib/rules/objc/ObjcVariablesExtension.java#L32-L44

################################################################################

cc_builtin_variables(
    name = "variables",
    srcs = [
        ":source_file",
        ":user_compile_flags",
        ":output_file",
        ":dependency_file",
        ":serialized_diagnostics_file",
        ":module_name",
        ":include_paths",
        ":quote_include_paths",
        ":system_include_paths",
        ":external_include_paths",
        ":framework_include_paths",
        ":module_map_file",
        ":dependent_module_map_files",
        ":module_files",
        ":preprocessor_defines",
        ":gcov_gcno_file",
        ":lto_indexing_bitcode_file",
        ":thinlto_index",
        ":thinlto_input_bitcode_file",
        ":thinlto_output_object_file",
        ":is_using_fission",
        ":per_object_debug_info_file",
        ":pic",
        ":output_preprocess_file",
        ":output_assembly_file",
        ":fdo_instrument_path",
        ":fdo_profile_path",
        ":cs_fdo_instrument_path",
        ":fdo_prefetch_hints_path",
        ":propeller_optimize_cc_path",
        ":propeller_optimize_ld_path",
        ":memprof_profile_path",
        ":includes",
        ":runtime_library_search_directories",
        ":library_search_directories",
        ":libraries_to_link",
        # ":libraries_to_link.type",
        # ":libraries_to_link.is_whole_archive",
        # ":libraries_to_link.name",
        # ":libraries_to_link.path",
        # ":libraries_to_link.object_files",
        ":thinlto_param_file",
        ":def_file_path",
        ":thinlto_indexing_param_file",
        ":thinlto_prefix_replace",
        ":thinlto_object_suffix_replace",
        ":thinlto_merged_object_file",
        ":linker_param_file",
        ":output_execpath",
        ":generate_interface_library",
        ":interface_library_builder_path",
        ":interface_library_input_path",
        ":interface_library_output_path",
        ":user_link_flags",
        ":linkstamp_paths",
        ":force_pic",
        ":strip_debug_symbols",
        ":is_cc_test",
        ":runtime_solib_name",
        ":stripopts",
        ":sysroot",
        ":input_file",
        ":legacy_compile_flags",
        ":unfiltered_compile_flags",
        ":legacy_link_flags",
    ],
    visibility = ["//visibility:public"],
)
