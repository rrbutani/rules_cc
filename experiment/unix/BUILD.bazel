
# Port of:
# https://github.com/bazelbuild/bazel/blob/3d7c5ae47e2a02ccd81eb8024f22d56ae7811c9b/tools/cpp/unix_cc_toolchain_config.bzl

# TODO: maybe move to a `config` subdir..

load("@rules_cc//cc/toolchains:action_type_config.bzl", "cc_action_type_config")
load("@rules_cc//cc/toolchains:actions.bzl", "cc_action_type", "cc_action_type_set")
load("@rules_cc//cc/toolchains:args_list.bzl", "cc_args_list")
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load("@rules_cc//cc/toolchains:feature_constraint.bzl", "cc_feature_constraint")
load("@rules_cc//cc/toolchains:feature.bzl", "cc_feature")
load("@rules_cc//cc/toolchains:format.bzl", "format_arg")
load("@rules_cc//cc/toolchains:mutually_exclusive_category.bzl", "cc_mutually_exclusive_category")
load("@rules_cc//cc/toolchains:nested_args.bzl", "cc_nested_args")
load("@rules_cc//cc/toolchains:tool.bzl", "cc_tool")
load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")
# load(":defs.bzl", "print_cc_toolchain_config_info")

################################################################################

## Knobs

        # "compile_flags": attr.string_list(),
        # "dbg_compile_flags": attr.string_list(),
        # "opt_compile_flags": attr.string_list(),
        # "conly_flags": attr.string_list(),
        # "cxx_flags": attr.string_list(),
        # "link_flags": attr.string_list(),
        # "archive_flags": attr.string_list(),
        # "link_libs": attr.string_list(),
        # "opt_link_flags": attr.string_list(),
        # "unfiltered_compile_flags": attr.string_list(),
        # "coverage_compile_flags": attr.string_list(),
        # "coverage_link_flags": attr.string_list(),
        # "supports_start_end_lib": attr.bool(),

        # is_clang?

################################################################################

## Action Groups:

# https://github.com/bazelbuild/bazel/blob/3d7c5ae47e2a02ccd81eb8024f22d56ae7811c9b/tools/cpp/unix_cc_toolchain_config.bzl#L99
alias(
    name = "all_compile_actions",
    actual = "@rules_cc//tolchains/actions:compile_actions",
)

alias(
    name = "all_cpp_compile_actions",
    actual = "@rules_cc//tolchains/actions:cpp_compile_actions",
)

alias(
    name = "preprocessor_compile_actions",
    actual = "@rules_cc//tolchains/actions:preprocessor_compile_actions",
)

alias(
    name = "codegen_compile_actions",
    actual = "@rules_cc//tolchains/actions:codegen_compile_actions",
)

# NOTE: purposeful divergence from `unix_cc_toolchain_config`: this includes
# `lto_index_actions`.
alias(
    name = "all_link_actions",
    actual = "@rules_cc//tolchains/actions:all_link_actions",
)

alias(
    name = "lto_index_actions",
    actual = "@rules_cc//tolchains/actions:lto_index_actions",
)

################################################################################

## Args + Features:

# NOTE: divergence: we include implied (legacy) features and action configs
# explicitly...

# NOTE: preserve ordering when adding in implied legacy features!
extra features (linux ordering):
  - [missing legacy]: supports_interface_shared_libraries
  - [missing legacy]: legacy_compile_flags # note: shuffled to front when legacy features are *not* disabled: https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/CcModule.java#L1311
  - [same as legacy]: dependency_file
  + serialized_diagnostics_file (not legacy!)
  - [same as legacy]: random_seed
  - [same as legacy]: pic
  - [same as legacy]: per_object_debug_info
  - [same as legacy]: preprocessor_defines
  - [same as legacy]: includes
  - [same as legacy]: include_paths # technically not the same; legacy has `framework_include_paths`... (should be okay)
  + external_include_paths (not legacy!)
  - [same as legacy]: fdo_instrument
  - [same as legacy]: cs_fdo_instrument
  - [same as legacy]: cs_fdo_optimize
  + thin_lto (not legacy!)
  - [same as legacy]: fdo_prefetch_hints
  - [same as legacy]: autofdo
  - [missing legacy]: propeller_optimize_thinlto_compile_actions
  - [missing legacy]: propeller_optimize
  - [missing legacy]: memprof_optimize
  - [same as legacy]: build_interface_libraries
  - [same as legacy]: dynamic_library_linker_tool
  - [same as legacy]: shared_flag
  - [same as legacy]: linkstamps
  - [same as legacy]: output_execpath_flags
  + runtime_library_search_directories (deivated from legacy!) # legacy uses `@loader_path` instead of `rpath` on macOS... unclear which is preferable
  - [same as legacy]: library_search_directories
  + libtool (not legacy! fully custom?) # only enabled on macOS
  + archiver_flags (deviated from legacy!) # expresses the same intent as legacy but via a feature (libtool) instead of `ifLinux`/`ifMac`. I think this version is cleaner than legacy's. Also adds archive flags to `cpp_link_static_library`... can reuse some of the `cc_args`
  - [same as legacy]: force_pic_flags # technically deviated: legacy uses `-Wl,-pie` instead of `-pie` on macOS but I think this is fine?
  - [same as legacy]: fission_support
  - [same as legacy]: strip_debug_symbols
  + coverage (deviated from legacy!) # I think I like legacy's solution better though?
  - [missing legacy] llvm_coverage_map_format
  - [missing legacy] gcc_coverage_map_format
  + supports_pic (not legacy!)
  + asan (not legacy! fully custom?)
  + tsan (not legacy! fully custom?)
  + ubsan (not legacy! fully custom?)
  - [same as legacy]: static_link_cpp_runtimes # note: reordered
  + supports_start_end_lib (not legacy! OPT)
  + default_compile_flags (not legacy!) # note: shuffled to front when legacy features are *not* disabled: https://github.com/bazelbuild/bazel/blob/2afbc92f5cc81e781664a9b4000b8d769b9d7e84/src/main/java/com/google/devtools/build/lib/rules/cpp/CcModule.java#L1321; # TODO: should we move to front?
  + default_link_flags (not legacy! fully custom?)
  - [same as legacy]: libraries_to_link # note: reordered; technically deviated: legacy uses `-force_load` on macOS... I think this is okay though
  - [same as legacy]: user_link_flags # note: reordered
  - [missing legacy]: legacy_link_flags
  + default_link_libs (not legacy! fully custom?)
  - [same as legacy]: static_libgcc # note: reordered
  - [same as legcacy]: fdo_optimize # note: reordered; technically deviated: legacy has some `-Wno-profile-instr-{unprofiled,out-of-date}` flags that `unix_cc_toolchain_config.bzl` doesn't. I think this is fine; looks like the latter just wasn't synced (out of date)
  + supports_dynamic_linker (not legacy! OPT)
  + dbg (not legacy! OPT)
  + opt (not legacy! OPT)
  - [missing legacy] fully_static_link
  - [same as legacy]: user_compile_flags
  - [same as legacy]: sysroot
  + unfiltered_compile_flags (deviated from legacy!) # legacy uses the `unfiltered_compile_flags` variable (which maybe doesn't exist?) and unix inlines the args from an attr...
  + treat_warnings_as_errors (not legacy! fully custom?)
  + archive_param_file (not legacy!)
  + use_module_maps (not legacy! fully custom? if: clang)
  + module_maps (not legacy! if: clang)
  + layering_check (not legacy! if: clang)
  - [missing legacy]: linker_param_file
  - [missing legacy]: compiler_input_flags
  - [missing legacy]: compiler_output_flags

# 24 features to implement here; 44 in legacy
# 68 total...

# TODO: different subset for macOS, different ordering; plus extras:
#   - macos_minimum_os
#   - macos_default_link_flags

################################################################################

## Action Configs + Tools:

cc_tool(
    name = "llvm_cov_tool",
    src = ":todo", data = [], requires_any_of = [],
)
cc_tool(
    name = "objcopy",
    src = ":todo", data = [], requires_any_of = [],
)


extra action configs:
  - llvm cov
  - objcopy

################################################################################

# Toolchain:

################################################################################
